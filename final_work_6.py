# -*- coding: utf-8 -*-
"""Final_work_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ybfIQ2SCg21A9xUeyqGRDTLXzM8gBIsk
"""

import pandas as pd
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind
from sklearn.model_selection import train_test_split
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.metrics import accuracy_score, classification_report

"""Загрузите файл HR.csv в pandas dataframe"""

df = pd.read_csv('HR.csv')

df.head()

"""Рассчитайте основные статистики для переменных
(среднее,медиана,мода,мин/макс,сред.отклонение).
"""

statistics = df.describe(include='all').transpose()

modes = df.mode().iloc[0]

statistics['mode'] = modes

statistics

"""Рассчитайте и визуализировать корреляционную матрицу для
количественных переменных.
Определите две самые скоррелированные и две наименее
скоррелированные переменные.
"""

correlation_matrix = df.corr()

sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Корреляционная матрица")
plt.show()

most_correlated = correlation_matrix.unstack().sort_values(ascending=False).drop_duplicates()
most_correlated_variables = most_correlated.head(2)
print("Две самые скоррелированные переменные:")
print(most_correlated_variables)

least_correlated_variables = most_correlated.tail(2)
print("\nДве наименее скоррелированные переменные:")
print(least_correlated_variables)

"""Рассчитайте сколько сотрудников работает в каждом
департаменте.
"""

employees_by_department = df['department'].value_counts()

print("Количество сотрудников в каждом департаменте:")
print(employees_by_department)

"""Показать распределение сотрудников по зарплатам."""

salary_distribution = df['salary'].value_counts()

plt.bar(salary_distribution.index, salary_distribution)
plt.title('Распределение сотрудников по зарплатам')
plt.xlabel('Уровень зарплаты')
plt.ylabel('Количество сотрудников')
plt.show()

"""Показать распределение сотрудников по зарплатам в каждом
департаменте по отдельности
"""

salary_distribution_by_department = df.groupby(['department', 'salary']).size().unstack()

fig, axes = plt.subplots(nrows=1, ncols=len(salary_distribution_by_department), figsize=(15, 5))
for i, (department, data) in enumerate(salary_distribution_by_department.items()):
    data.plot(kind='bar', ax=axes[i], title=f'Распределение в департаменте {department}')
    axes[i].set_xlabel('Уровень зарплаты')
    axes[i].set_ylabel('Количество сотрудников')

plt.tight_layout()
plt.show()

"""Проверить гипотезу, что сотрудники с высоким окладом
проводят на работе больше времени, чем сотрудники с низким
окладом
"""

low_salary_hours = df[df['salary'] == 'low']['average_montly_hours']
high_salary_hours = df[df['salary'] == 'high']['average_montly_hours']

statistic, p_value = ttest_ind(low_salary_hours, high_salary_hours)

print(f"Статистика t: {statistic}")
print(f"p-значение: {p_value}")

alpha = 0.05
if p_value < alpha:
    print("Отвергаем нулевую гипотезу: существует статистически значимая разница")
else:
    print("Не отвергаем нулевую гипотезу: статистически значимой разницы нет")

"""Рассчитать следующие показатели среди уволившихся и не
уволившихся сотрудников (по отдельности):
10
● Доля сотрудников с повышением за последние 5 лет
● Средняя степень удовлетворенности
● Среднее количество проектов
"""

result = df.groupby('left').agg({
    'promotion_last_5years': 'mean',
    'satisfaction_level': 'mean',
    'number_project': 'mean'
}).reset_index()

result.columns = ['left', 'promotion_rate', 'avg_satisfaction', 'avg_projects']

print(result)

"""Разделить данные на тестовую и обучающую выборки
Построить модель LDA, предсказывающую уволился ли
сотрудник на основе имеющихся факторов (кроме department и
salary)
Оценить качество модели на тестовой выборки
"""

X = df.drop(['left', 'department', 'salary'], axis=1)
y = df['left']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lda = LinearDiscriminantAnalysis()
lda.fit(X_train, y_train)

y_pred = lda.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:\n", report)